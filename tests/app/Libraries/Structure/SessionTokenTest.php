<?php

namespace tests\app\Libraries\Structure;

use app\Libraries\Structure\RedisToken;
use app\Libraries\Structure\SessionToken;
use Mockery;

class SessionTokenTest extends \PHPUnit_Framework_TestCase{

    public function setUp()
    {
        parent::setUp();
    }

    public function test_construct_where_param_data_is_complete(){
        $data = [
            'access_token' => 'xxx',
            'user_id' => 1,
            'user_type' => 'admin',
            'token_type' => RedisToken::TOKEN_TYPE,
            'created_at' => '2017-07-18 00:00:00',
        ];

        $RedisTokenMock = Mockery::mock('\app\Libraries\Structure\RedisToken[getCurrentTimeStamp]', [$data])->shouldAllowMockingProtectedMethods();
        $RedisTokenMock->shouldReceive('getCurrentTimeStamp')->times(2)->andReturn(strtotime('2017-07-18 00:00:10'));

        $SessionToken = new SessionToken($RedisTokenMock);

        // get single attribute
        $this->assertEquals($data['access_token'], $SessionToken->getAttribute('access_token'));
        $this->assertEquals($data['user_type'], $SessionToken->getAttribute('user_type'));
        $this->assertEquals($data['token_type'], $SessionToken->getAttribute('token_type'));
        $this->assertEquals(3590, $SessionToken->getAttribute('expires_in'));

        // get invalid attribute
        $this->assertNull($SessionToken->getAttribute('invalid_attribute_name'));
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        Mockery::close();
    }
}